// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateUserByIDHandlerFunc turns a function with the right signature into a update user by ID handler
type UpdateUserByIDHandlerFunc func(UpdateUserByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateUserByIDHandlerFunc) Handle(params UpdateUserByIDParams) middleware.Responder {
	return fn(params)
}

// UpdateUserByIDHandler interface for that can handle valid update user by ID params
type UpdateUserByIDHandler interface {
	Handle(UpdateUserByIDParams) middleware.Responder
}

// NewUpdateUserByID creates a new http.Handler for the update user by ID operation
func NewUpdateUserByID(ctx *middleware.Context, handler UpdateUserByIDHandler) *UpdateUserByID {
	return &UpdateUserByID{Context: ctx, Handler: handler}
}

/*
	UpdateUserByID swagger:route PUT /users/{id} users updateUserById

Update user by ID
*/
type UpdateUserByID struct {
	Context *middleware.Context
	Handler UpdateUserByIDHandler
}

func (o *UpdateUserByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateUserByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
